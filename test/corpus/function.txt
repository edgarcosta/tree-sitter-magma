================================================================================
Function call
================================================================================

EllipticCurve("11a1");

---
(program
  (expression_statement
    (call
      function: (identifier)
      arguments: (argument_list
        argument: (string)))))

================================================================================
Basic definition function 
================================================================================

function test()
    return 0;
end function;

---

(program
  (function_definition
    name: (identifier)
    parameters: (parameters)
    body: (block
      (return_statement
        (integer)))))

================================================================================
Function definition with arguments
================================================================================

function test(x,y : z := 3)
    x := x + y;
    return x + z;
end function;

---

(program
  (function_definition
    name: (identifier)
    parameters: (parameters
      (identifier)
      (identifier)
      (optional_parameter
        name: (identifier)
        value: (integer)))
    body: (block
      (assignment
        left: (identifier)
        right: (binary_operator
          left: (identifier)
          right: (identifier)))
      (return_statement
        (binary_operator
          left: (identifier)
          right: (identifier))))))

================================================================================
Function definition with := notation
================================================================================

fibonacci := function(n)
   if n le 2 then
      return 1;
   else
      return $$(n-1) + $$(n-2);
   end if;
end function;

---

; copied from example H2E1
(program
  (function_definition
    name: (identifier)
    parameters: (parameters
      (identifier))
    body: (block
      (if_statement
        condition: (comparison_operator
          left: (identifier)
          right: (integer))
        consequence: (block
          (return_statement
            (integer)))
        alternative: (else_clause
          consequence: (block
            (return_statement
              (binary_operator
                left: (double_dollar
                  (argument_list
                    argument: (binary_operator
                      left: (identifier)
                      right: (integer))))
                right: (double_dollar
                  (argument_list
                    argument: (binary_operator
                      left: (identifier)
                      right: (integer))))))))))))

================================================================================
Procedure definition with no arguments
================================================================================

procedure main()
    print "Hello, World!";
end procedure;

---

(program
  (procedure_definition
    name: (identifier)
    parameters: (parameters)
    body: (block
      (print_statement
        (string)))))

================================================================================
Procedure definition and modifying arguments
================================================================================

procedure foobar(~foo, ~bar)
    print foo;
    print bar;
    foo, bar := bar, foo;
end procedure;

---

(program
  (procedure_definition
    name: (identifier)
    parameters: (parameters
      (ref_identifier
        (identifier))
      (ref_identifier
        (identifier)))
    body: (block
      (print_statement
        (identifier))
      (print_statement
        (identifier))
      (assignment
        left: (identifier)
        left: (identifier)
        right: (identifier)
        right: (identifier)))))

================================================================================
Procedure definition with := notation
================================================================================

CheckPythagoras := procedure(x, y, z, ~h)
    if x^2+y^2 eq z^2 then
        h := true;
    else
        h := false;
    end if;
end procedure;

---

; adapted from example H2E5
(program
  (procedure_definition
    name: (identifier)
    parameters: (parameters
      (identifier)
      (identifier)
      (identifier)
      (ref_identifier
        (identifier)))
    body: (block
      (if_statement
        condition: (comparison_operator
          left: (binary_operator
            left: (binary_operator
              left: (identifier)
              right: (integer))
            right: (binary_operator
              left: (identifier)
              right: (integer)))
          right: (binary_operator
            left: (identifier)
            right: (integer)))
        consequence: (block
          (assignment
            left: (identifier)
            right: (true)))
        alternative: (else_clause
          consequence: (block
            (assignment
              left: (identifier)
              right: (false))))))))
