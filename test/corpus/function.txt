================================================================================
Function call
================================================================================

EllipticCurve("11a1");

---
(program
  (expression_statement
    (call
      function: (identifier)
      arguments: (argument_list
        (string)))))

================================================================================
Basic definition function 
================================================================================

function test()
    return 0;
end function;

---

(program
  (function_definition
    name: (identifier)
    arguments: (argument_list)
    body: (block
      (return_statement
        (expression_statement
          (integer))))))

================================================================================
Function definition with arguments
================================================================================

function test(x,y)
    x := x + y;
    return x;
end function;

---

(program
  (function_definition
    name: (identifier)
    arguments: (argument_list
      (identifier)
      (identifier))
    body: (block
      (assignment
        left: (identifier)
        right: (binary_operator
          left: (identifier)
          right: (identifier)))
      (return_statement
        (expression_statement
          (identifier))))))


================================================================================
Procedure definition with no arguments
================================================================================

procedure main()
    print "Hello, World!";
end procedure;

---

(program
  (procedure_definition
    name: (identifier)
    arguments: (argument_list)
    body: (block
      (print_statement
        (string)))))

================================================================================
Procedure definition and modifying arguments
================================================================================

procedure foobar(~foo, ~bar)
    print foo;
    print bar;
    foo, bar := bar, foo;
end procedure;

---

(program
  (procedure_definition
    name: (identifier)
    arguments: (argument_list
      (unary_operator
        right: (identifier))
      (unary_operator
        right: (identifier)))
    body: (block
      (print_statement
        (identifier))
      (print_statement
        (identifier))
      (assignment
        left: (identifier)
        left: (identifier)
        right: (identifier)
        right: (identifier)))))