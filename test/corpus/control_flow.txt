================================================================================
Basic if statement
================================================================================

if IsPrime(m) then
    m, "is prime";
else
    Factorization(m);
end if;   
---

(program
  (if_statement
    condition: (call
      function: (identifier)
      arguments: (argument_list
        argument: (identifier)))
    consequence: (block
      (expression_statement
        (identifier)
        (string)))
    alternative: (else_clause
      consequence: (block
        (expression_statement
          (call
            function: (identifier)
            arguments: (argument_list
              argument: (identifier))))))))

================================================================================
Complex nested if statements
================================================================================

if x gt 1 then
   if x lt 2 then
      	print -x;
   elif x eq 2 then
   	print 2;
   else
	x := 0;
   end if;
end if;
   
---

(program
  (if_statement
    condition: (comparison_operator
      left: (identifier)
      right: (integer))
    consequence: (block
      (if_statement
        condition: (comparison_operator
          left: (identifier)
          right: (integer))
        consequence: (block
          (print_statement
            (expression_statement
              (unary_operator
                right: (identifier)))))
        alternative: (elif_clause
          condition: (comparison_operator
            left: (identifier)
            right: (integer))
          consequence: (block
            (print_statement
              (expression_statement
                (integer)))))
        alternative: (else_clause
          consequence: (block
            (assignment
              left: (identifier)
              right: (integer))))))))

================================================================================
Case statement
================================================================================

x := 73;
case Sign(x):
   when 1:
      x, "is positive";
   when 0:
      x, "is zero";
   when -1:
      x, "is negative";
end case;


---

; copied from https://magma.maths.usyd.edu.au/magma/handbook/text/11
(program
  (assignment
    left: (identifier)
    right: (integer))
  (case_statement
    matchee: (call
      function: (identifier)
      arguments: (argument_list
        argument: (identifier)))
    (when_clause
      match: (integer)
      consequence: (block
        (expression_statement
          (identifier)
          (string))))
    (when_clause
      match: (integer)
      consequence: (block
        (expression_statement
          (identifier)
          (string))))
    (when_clause
      match: (unary_operator
        right: (integer))
      consequence: (block
        (expression_statement
          (identifier)
          (string))))))

================================================================================
Case statement with else
================================================================================

case Sign(x):
   when 1:
      x, "is positive";
   else:
      x, "is non-positive";
end case;

---

(program
  (case_statement
    matchee: (call
      function: (identifier)
      arguments: (argument_list
        argument: (identifier)))
    (when_clause
      match: (integer)
      consequence: (block
        (expression_statement
          (identifier)
          (string))))
    else: (block
      (expression_statement
        (identifier)
        (string)))))

================================================================================
Case constructor
================================================================================

myL:=func< A|  
    case<Type(A) | SetCart : LSeries(A[1])*LSeries(A[2]),
                   JacHyp  : LSeries(Curve(A) : LocalData:="Ogg"),
                   CrvEll  : LSeries(A),
                   default : false>>;
---

(program
  (assignment
    left: (identifier)
    right: (inline_function
      parameters: (identifier)
      body: (case_constructor
        (call
          function: (identifier)
          arguments: (argument_list
            argument: (identifier)))
        match: (identifier)
        consequence: (binary_operator
          left: (call
            function: (identifier)
            arguments: (argument_list
              argument: (seq_slice
                parent: (identifier)
                (seqenum
                  (integer)))))
          right: (call
            function: (identifier)
            arguments: (argument_list
              argument: (seq_slice
                parent: (identifier)
                (seqenum
                  (integer))))))
        match: (identifier)
        consequence: (call
          function: (identifier)
          arguments: (argument_list
            argument: (call
              function: (identifier)
              arguments: (argument_list
                argument: (identifier)))
            (optional_argument
              argument: (identifier)
              default_value: (string))))
        match: (identifier)
        consequence: (call
          function: (identifier)
          arguments: (argument_list
            argument: (identifier)))
        match: (identifier)
        consequence: (false)))))

================================================================================
Ternary operator
================================================================================

s := (y gt 0) select 1 else -1;

---

(program
  (assignment
    left: (identifier)
    right: (ternary_operator
      conditional: (parenthesized_expression
        (comparison_operator
          left: (identifier)
          right: (integer)))
      then: (integer)
      else: (unary_operator
        right: (integer)))))


================================================================================
Nested ternary operator
================================================================================

(y gt 0) select 1 else (y eq 0 select 0 else -1);

---

(program
  (expression_statement
    (ternary_operator
      conditional: (parenthesized_expression
        (comparison_operator
          left: (identifier)
          right: (integer)))
      then: (integer)
      else: (parenthesized_expression
        (comparison_operator
          left: (identifier)
          right: (ternary_operator
            conditional: (integer)
            then: (integer)
            else: (unary_operator
              right: (integer))))))))

================================================================================
Repeat statement
================================================================================

repeat
    while IsEven(x) do
        i +:= 1;
        x div:= 2;
    end while;
    if x eq 1 then
        break;
    end if;
    x := 3*x+1;
    i +:= 1;
until false;

---
; copied from https://magma.maths.usyd.edu.au/magma/handbook/text/13#86
(program
  (repeat_statement
    body: (block
      (while_statement
        condition: (call
          function: (identifier)
          arguments: (argument_list
            argument: (identifier)))
        body: (block
          (augmented_assignment
            left: (identifier)
            right: (integer))
          (augmented_assignment
            left: (identifier)
            right: (integer))))
      (if_statement
        condition: (comparison_operator
          left: (identifier)
          right: (integer))
        consequence: (block
          (break_statement)))
      (assignment
        left: (identifier)
        right: (binary_operator
          left: (binary_operator
            left: (integer)
            right: (identifier))
          right: (integer)))
      (augmented_assignment
        left: (identifier)
        right: (integer)))
    condition: (false)))


================================================================================
Basic for loop
================================================================================

for i := 1 to 13 do
    i +:= 1;
end for;

---

(program
  (for_statement
    quantifier: (for_quantifier
      (identifier)
      from: (integer)
      to: (integer))
    body: (block
      (augmented_assignment
        left: (identifier)
        right: (integer)))))

================================================================================
Basic for loop with by
================================================================================
	
for i:=1 to 10 by 2 do i; end for;

---

(program
  (for_statement
    quantifier: (for_quantifier
      (identifier)
      from: (integer)
      to: (integer)
      by: (integer))
    body: (block
      (expression_statement
        (identifier)))))


================================================================================
Enumerated for loop
================================================================================

for i -> x in X do
    print i,x;
end for;

--- 

(program
  (for_statement
    quantifier: (for_quantifier
      index: (identifier)
      element: (identifier)
      parent: (identifier))
    body: (block
      (print_statement
        (identifier)
        (identifier)))))


================================================================================
For loop with multiple iterations
================================================================================

for i in [0..2], j in [0..2] do
    printf "%o,%o : %o\n",i,j,HodgeNumber(X,i,j);
end for;

---

(program
  (for_statement
    quantifier: (for_quantifier
      (iterable_binding
        element: (identifier)
        parent: (aggregate
          (seqenum
            (range
              start: (integer)
              end: (integer)))))
      (iterable_binding
        element: (identifier)
        parent: (aggregate
          (seqenum
            (range
              start: (integer)
              end: (integer))))))
    body: (block
      (print_statement
        (expression_statement
          (string)
          (identifier)
          (identifier)
          (call
            function: (identifier)
            arguments: (argument_list
              argument: (identifier)
              argument: (identifier)
              argument: (identifier))))))))




