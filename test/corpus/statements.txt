================================================================================
Multiple inline expressions
================================================================================

x, y, 2 + 4;

---

(program
  (expression_statement
    (identifier)
    (identifier)
    (binary_operator
      left: (integer)
      right: (integer))))

================================================================================
Try-catch and print statements
================================================================================

try print x; catch e print x; end try;

try print x; catch e; print x; end try;

---

(program
  (try_catch_statement
    (block
      (print_statement
        (identifier)))
    error: (identifier)
    (block
      (print_statement
        (identifier)))))
  (try_catch_statement
    (block
      (print_statement
        (identifier)))
    error: (identifier)
    (block
      (print_statement
        (identifier)))))

================================================================================
vprint statement
================================================================================

vprint User1: "Computing order...";

---

(program
  (vprint_statement
    flag: (identifier)
    (string)))


================================================================================
vprintf statement
================================================================================

vprintf PRProspection, 4 : "Value %o, Threshold %o\n", value, threshold;

---

(program
  (vprint_statement
    flag: (identifier)
    n: (integer)
    (string)
    (identifier)
    (identifier)))

================================================================================
Eval expression
================================================================================

(eval "1+2") + eval "3";

---

(program
  (expression_statement
    (binary_operator
      left: (parenthesized_expression
        (eval_expression
          (string)))
      right: (eval_expression
        (string)))))

================================================================================
Assert statement
================================================================================

assert2 1 + 2 eq 3;

---

(program
  (assert_statement
    (comparison_operator
      left: (binary_operator
        left: (integer)
        right: (integer))
      right: (integer))))

================================================================================
Declare verbose statement
================================================================================

declare verbose MyAlgorithm, 3;

---

(program
  (declare_statement
    (verbosity_declaration
      function: (identifier)
      level: (integer))))

================================================================================
Declare attributes statement
================================================================================

declare attributes MyRat: Numer, Denom;

--- 

(program
  (declare_statement
    (attribute_declaration
      category: (identifier)
      attribute: (identifier)
      attribute: (identifier))))

================================================================================
Local variables declaration
================================================================================

local A, outers, NS, CS;

---

(program
  (local_statement
    (identifier)
    (identifier)
    (identifier)
    (identifier)))

================================================================================
Error statement
================================================================================

error "Runtime error in 'MyFunc'";

---

(program
  (error_statement
    (string)))

================================================================================
Error statement with if
================================================================================

error if 1 gt 0, "Oops!";

---

(program
  (error_statement
    condition: (comparison_operator
      left: (integer)
      right: (integer))
    (string)))
