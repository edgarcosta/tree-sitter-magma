================================================================================
Multiple inline expressions
================================================================================

x, y, 2 + 4;

---

(program
  (expression_statement
    (identifier)
    (identifier)
    (binary_operator
      left: (integer)
      right: (integer))))

================================================================================
Try-catch and print statements
================================================================================

try print x; catch e print x; end try;

try print x; catch e; print x; end try;

---

(program
  (try_catch_statement
    (block
      (print_statement
        (identifier)))
    error: (identifier)
    (block
      (print_statement
        (identifier))))
  (try_catch_statement
    (block
      (print_statement
        (identifier)))
    error: (identifier)
    (block
      (print_statement
        (identifier))))
)
          
================================================================================
vprint statement
================================================================================

vprint User1: "Computing order...";

---

(program
  (vprint_statement
    flag: (identifier)
    (string)))


================================================================================
vprintf statement
================================================================================

vprintf PRProspection, 4 : "Value %o, Threshold %o\n", value, threshold;

---

(program
  (vprint_statement
    flag: (identifier)
    n: (integer)
    (string)
    (identifier)
    (identifier)))

================================================================================
Eval expression
================================================================================

(eval "1+2") + eval "3";

---

(program
  (expression_statement
    (binary_operator
      left: (parenthesized_expression
        (eval_expression
          (string)))
      right: (eval_expression
        (string)))))

================================================================================
Assert statement
================================================================================

assert2 1 + 2 eq 3;

---

(program
  (assert_statement
    (comparison_operator
      left: (binary_operator
        left: (integer)
        right: (integer))
      right: (integer))))

================================================================================
Declare verbose statement
================================================================================

declare verbose MyAlgorithm, 3;

---

(program
  (declare_statement
    (verbosity_declaration
      function: (identifier)
      level: (integer))))

================================================================================
Declare attributes statement
================================================================================

declare attributes MyRat: Numer, Denom;

--- 

(program
  (declare_statement
    (attribute_declaration
      category: (identifier)
      attribute: (identifier)
      attribute: (identifier))))

================================================================================
Local variables declaration
================================================================================

local A, outers, NS, CS;

---

(program
  (local_statement
    (identifier)
    (identifier)
    (identifier)
    (identifier)))

================================================================================
Error statement
================================================================================

error "Runtime error in 'MyFunc'";

---

(program
  (error_statement
    (string)))

================================================================================
Error statement with if
================================================================================

error if 1 gt 0, "Oops!";

---

(program
  (error_statement
    condition: (comparison_operator
      left: (integer)
      right: (integer))
    (string)))

================================================================================
Complex quoted identifiers
================================================================================

'foo.1 + 2' := 2;
'foo.1 + 2';

---

(program
  (assignment
    left: (identifier)
    right: (integer))
  (expression_statement
    (identifier)))

============================
Exit statements in different contexts
============================

try
    x := 1;
    exit ERROR_CODE;
    y := 2;
catch e
    print "Caught:", e;
end try;

procedure test_exit()
    x := 1;
    exit SUCCESS;
    y := 2;
end procedure;

exit compute_result();

---

(program
  (try_catch_statement
    (block
      (assignment
        left: (identifier)
        right: (integer))
      (exit_statement
        (identifier))
      (assignment
        left: (identifier)
        right: (integer)))
    error: (identifier)
    (block
      (print_statement
        (string)
        (identifier))))
  (procedure_definition
    name: (identifier)
    parameters: (parameters)
    body: (block
      (assignment
        left: (identifier)
        right: (integer))
      (exit_statement
        (identifier))
      (assignment
        left: (identifier)
        right: (integer))))
  (exit_statement
    (call
      function: (identifier)
      arguments: (argument_list))))

============================
Complex try-catch with multiple exits
============================

try
    if condition then
        exit EARLY_EXIT;
    end if;
    process_data();
    exit SUCCESS;
catch e
    if e eq "fatal" then
        exit FATAL_ERROR;
    end if;
    print "Recovering from:", e;
end try;

---

(program
  (try_catch_statement
    (block
      (if_statement
        condition: (identifier)
        consequence: (block
          (exit_statement
            (identifier))))
      (expression_statement
        (call
          function: (identifier)
          arguments: (argument_list)))
      (exit_statement
        (identifier)))
    error: (identifier)
    (block
      (if_statement
        condition: (comparison_operator
          left: (identifier)
          right: (string))
        consequence: (block
          (exit_statement
            (identifier))))
      (print_statement
        (string)
        (identifier)))))
