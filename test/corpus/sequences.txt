==================
Standard sequences
==================

[1, 2, 3];

---

(program
  (expression_statement
    (aggregate
      (seqenum
        (integer)
        (integer)
        (integer)))))

==================
Empty standard sequence
==================

[];

---

(program
  (expression_statement
    (aggregate
      (seqenum))))

==================
Starred sequences
==================

[* 1, 2, 3 *];

---

(program
  (expression_statement
    (aggregate
      (list
        (integer)
        (integer)
        (integer)))))

==================
Empty starred sequence
==================

[* *];

---

(program
  (expression_statement
    (aggregate
      (list))))

==================
Tuples
==================

<1, 2, 3>;

---

(program
  (expression_statement
    (aggregate
      (tuple
        (integer)
        (integer)
        (integer)))))

==================
Empty tuple
==================

<>;

---

(program
  (expression_statement
    (aggregate
      (tuple))))


====================================
Simple 2-tuple
====================================

(1 -> 2) eq <1,2>;

---

(program
  (expression_statement
    (comparison_operator
      left: (parenthesized_expression
        (aggregate
          (two_tuple
            (integer)
            (integer))))
      right: (aggregate
        (tuple
          (integer)
          (integer))))))

====================================
Iterated 2-tuples
====================================

1 -> 2 -> 3;

---

(program
  (expression_statement
    (aggregate
      (two_tuple
        (aggregate
          (two_tuple
            (integer)
            (integer)))
        (integer)))))

==================
Sets
==================

{1, 2, 3};

---

(program
  (expression_statement
    (aggregate
      (set
        (integer)
        (integer)
        (integer)))))

==================
Empty set
==================

{};

---

(program
  (expression_statement
    (aggregate
      (set))))

==================
Indexed sets
==================

{@1, 2, 3@};

---

(program
  (expression_statement
    (aggregate
      (indexed_set
        (integer)
        (integer)
        (integer)))))

==================
Empty indexed set
==================

{@@};

---

(program
  (expression_statement
    (aggregate
      (indexed_set))))

==================
Multisets
==================

{*1, 2, 3*};

---

(program
  (expression_statement
    (aggregate
      (multiset
        (integer)
        (integer)
        (integer)))))

==================
Empty multiset
==================

{**};

---

(program
  (expression_statement
    (aggregate
      (multiset))))


==================
Sequences with expressions
==================

[a + b, c * d, e^f];

---

(program
  (expression_statement
    (aggregate
      (seqenum
        (binary_operator
          left: (identifier)
          right: (identifier))
        (binary_operator
          left: (identifier)
          right: (identifier))
        (binary_operator
          left: (identifier)
          right: (identifier))))))

==================
Mixed content sequences
==================

[* 1, "hello", true, x + y *];

---

(program
  (expression_statement
    (aggregate
      (list
        (integer)
        (string)
        (true)
        (binary_operator
          left: (identifier)
          right: (identifier))))))

==================
Multi-index of sequence
==================

S[2][2] := 4;

---

(program
  (assignment
    left: (seq_slice
      parent: (seq_slice
        parent: (identifier)
        (seqenum
          (integer)))
      (seqenum
        (integer)))
    right: (integer)))

==================
Multi-index with nested sequence
==================

x := S[ [2, 3], 2 ];

---

(program
  (assignment
    left: (identifier)
    right: (seq_slice
      parent: (identifier)
      (seqenum
        (aggregate
          (seqenum
            (integer)
            (integer)))
        (integer)))))

==================
Reduction of aggregates
==================

&*{1, 2, 3};

---

(program
  (expression_statement
    (reduct_operator
      right: (aggregate
        (set
          (integer)
          (integer)
          (integer))))))


==================
Sequence with ..
==================

[0..9];

---

(program
  (expression_statement
    (aggregate
      (seqenum
        (range
          start: (integer)
          end: (integer))))))
	  
====================================
Sequence with .., by and universe
====================================

[Integers() | 0..9 by 2];

---

(program
  (expression_statement
    (aggregate
      (seqenum
        universe: (call
          function: (identifier)
          arguments: (argument_list))
        (range
          start: (integer)
          end: (integer)
          by: (integer))))))

====================================
Subsequence 
====================================

[x^2 : x in [1..5]];

--- 
(program
  (expression_statement
    (aggregate
      (seqenum
        (binary_operator
          left: (identifier)
          right: (integer))
        (binary_operator
          left: (identifier)
          right: (aggregate
            (seqenum
              (range
                start: (integer)
                end: (integer)))))))))


====================================
Subsequence with index and condition
====================================

[x^i : i -> x in [1..5] | IsEven(x)];

---

(program
  (expression_statement
    (aggregate
      (seqenum
        (binary_operator
          left: (identifier)
          right: (identifier))
        (binary_operator
          left: (aggregate
            (two_tuple
              (identifier)
              (identifier)))
          right: (aggregate
            (seqenum
              (range
                start: (integer)
                end: (integer)))))
        condition: (call
          function: (identifier)
          arguments: (argument_list
            argument: (identifier)))))))

====================================
Existential quantifier on set
====================================

exists(t){ <x, y> : x, y in [ t^3 : t in [-10..10] ] | x + y eq 218 };

---
; H10E12
(program
  (expression_statement
    (quantified_set
      (identifier)
      (set
        (aggregate
          (tuple
            (identifier)
            (identifier)))
        (identifier)
        (binary_operator
          left: (identifier)
          right: (aggregate
            (seqenum
              (binary_operator
                left: (identifier)
                right: (integer))
              (binary_operator
                left: (identifier)
                right: (aggregate
                  (seqenum
                    (range
                      start: (unary_operator
                        right: (integer))
                      end: (integer))))))))
        condition: (comparison_operator
          left: (binary_operator
            left: (identifier)
            right: (identifier))
          right: (integer))))))

====================================
Random element of set
====================================

random{ x : x in F | IsPrimitive(x) };

---

(program
  (expression_statement
    (random_element_of_set
      (set
        (identifier)
        (binary_operator
          left: (identifier)
          right: (identifier))
        condition: (call
          function: (identifier)
          arguments: (argument_list
            argument: (identifier)))))))

====================================
Representative of set
====================================

rep {x^2 : x in [1..5] | IsEven(x) };

---

(program
  (expression_statement
    (representative_of_set
      (set
        (binary_operator
          left: (identifier)
          right: (integer))
        (binary_operator
          left: (identifier)
          right: (aggregate
            (seqenum
              (range
                start: (integer)
                end: (integer)))))
        condition: (call
          function: (identifier)
          arguments: (argument_list
            argument: (identifier)))))))
